# Default values for influenzanet-2.0.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

namespace: case

####
# Global flags
####

# Common prefix for database names (use for multitenant db)
dbNamePrefix: ''

# Use Google Recaptcha, if true the secret googleRecaptchaKey should be defined too
useRecaptcha: true

# Replace this with the domain name for Influenzanet Application
domain: example.com

ingress:
  ApiVersion: v1
  # Use a simplified Ingress configuration (with wildcard path instead of specific)
  simplified: true

# Replace this with a list of domains to be included in the certificate
tlsDomains:
  - example.com

participantApiPath: "/api"
managementApiPath: "/admin"


# TLS Certificate Issuer Section
# issuerType 'acme', 'ca' 
issuerType: acme

# Cluster issuer Name
clusterIssuer : "letsencrypt-prod-site"
acmeServer: https://acme-v02.api.letsencrypt.org/directory
connectedEmail: sajeeth.sadananda@isi.it

# Name of the secret used to store the generated certificat will be stored
tlsSecretName: 'site-tls-web'

# In case of issuerType 'ca' put here the name of the secret containing the ca certificate and key, leave empty for acme
CAIssuerSecretName: 'ca-issuer-secret'

# Secrets Configuration Section

# JSON Web Token secret key (32 bytes random, base64 enconded)
jwtKey: ""
mongoUsername: "admin"
mongoPassword: "abc123"
mongoConnectionPrefix: ""
googleRecaptchaKey: ""
studyGlobalSecret: ""

# Persistant Storage Section
# Create a dedicated storage class (can be removed if your cluster already provides it)
createStorageClass: true

# Email service SMTP configuration
## Regular Email Server
smtpServers: |
  from: "username@email.com"
  sender: username@email.com
  replyTo:
    - username@email.com
  servers:
    - host: smtp.gmail.com
      port: 465
      connections: 2
      sendTimeout: 5
      auth:
        user: username@email.com
        password: "password" 

## High Priority email server
prioSmtpServers: |
  from: "username@email.com"
  sender: username@email.com
  replyTo:
    - username@email.com
  servers:
    - host: smtp.gmail.com
      port: 465
      connections: 2
      sendTimeout: 5
      auth:
        user: username@email.com
        password: "password" 

# Deployment and Service configurations for each micro-service.
## Add to this list to deploy additional micro-services

globalDb:
  dbConnexionStr: mongo-atlas-service:27017
  dbSecretName: case-mongodb-atlas

messageDB:
  dbConnexionStr: mongo-atlas-service:27017
  dbSecretName: case-mongodb-atlas

studyDB:
  dbConnexionStr: mongo-atlas-service:27017
  dbSecretName: case-mongodb-atlas

userDB:
  dbConnexionStr: mongo-atlas-service:27017
  dbSecretName: case-mongodb-atlas

# PARTICIPANT WEBAPP
svcWebParticipant:
    name: web-client
    replicas: 1
    image: sajeeth1009/participant-webapp:v0.0.1
    imagePullPolicy: Always
    containerPort: 3100
    serviceName: web-client-service

# EMAIL CLIENT #
svcEmailClient:
  name: email-client
  image: sajeeth1009/email-client-service-image:v0.9.1
  imagePullPolicy: Always
  replicas: 1
  containerPort: 5005
  serviceName: email-client-service
  configMapName: email-server-config
  
# LOGGING SERVICE #
svcLogging:
  name: logging
  replicas: 1
  image: sajeeth1009/logging-service-image:v0.1.0
  containerPort: 5006
  serviceName: logging-service
  dbSecretName: case-mongodb-atlas
  dbConnexionStr: mongo-atlas-service:27017

#  MANAGEMENT API #
svcManagementApi:
  name: management-api
  image: sajeeth1009/management-api-image:v0.12.1
  containerPort: 3232      
  corsAllowOrigins: 'https://tofudumplings.com,http://tofudumplings.com'
  debugMode: "false"
  serviceName: management-api-service

svcParticipantApi:
  name: participant-api
  image: sajeeth1009/participant-api-image:v0.12.1
  containerPort: 3231
  corsAllowOrigins: 'https://tofudumplings.com,http://tofudumplings.com'
  debugMode: "false"
  useDeleteEndpoint: true
  disableSignupEndpoint: false
  recaptchaSecretName: recaptcha-collection
  serviceName: participant-api-service
  
SvcMessageScheduler:
  name: messaging-scheduler
  replicas: 1
  image: 
  containerPort: 5009
  serviceName: messaging-scheduler-service
  dbTimeout: 30
  dbIdleTimeout: 46
  # Batch Sending Interval for High Priority (seconds)
  intervalHighPrio: 45
  # Batch Sending interval for Low priority messages (seconds)
  intervalLowPrio: 1800
  # Batch Sending interval for Auto messages (seconds)
  intervalAutoMessage: 120

# MESSAGING SERVICE #  
svcMessaging:
  name: messaging
  replicas: 1
  image: sajeeth1009/messaging-service-image:v0.9.1
  containerPort: 5004
  serviceName: messaging-service
  dbTimeout: 30
  dbIdleTimeout: 46

svcMongoDb:
  enabled: true
  name: mongo
  serviceName: mongo-atlas-service
  replicas: 1
  image: mongo:latest
  # Secret used to create the ROOT password, should have 'username' & password entry
  dbSecretName: case-mongodb-atlas
  containerPort: 27017
  # If false the service will be assigned to NodePort instead of clusterIp
  headless: true
  # Name of the pv to create
  pvClaimName: database-pv-claim
  # Storage class name to use for the MongoDb 
  storageClass: influenzanet-storage
  accessModes:
    - ReadWriteOnce
  # Size of the requested storage
  storageRequested: 50Gi

svcStudyService:
  name: study
  image: sajeeth1009/study-service-image:v0.13.4
  replicas: 1
  serviceName: study-service
  containerPort: 5003
  dbTimeout: 30
  dbIdleTimeout: 46
  timerEventFrequency: 86400
  timerEventCheckIntervalMin: 3600
  timerEventCheckIntervalVar: 900
  globalSecretName: study-global-secret

# USER MANAGEMENT SERVICE #
svcUserManagement:
  name: user-management
  image: sajeeth1009/user-management-image:v0.19.2
  replicas: 1
  serviceName: "user-management-service"
  containerPort: 5002
  dbTimeout: 30
  dbIdleTimeout: 46
  
  # JWT Tokens
  # Token expiration time in Minute
  tokenExpiration: 5
  
  # Name of the secret containing the jwt secret key
  jwtSecretName: jwt-collection
  # Maximum number of new created accounts, during the signupRateLimitWindow (5 minutes)
  newUserRateLimit: 100
  # Delay (seconds) after which to cleanup user account when it has not been verified
  cleanupUnverifiedUsersAfter: 129000
  # Lifetime in seconds for verification code of a new account. Default is 15 minutes
  verificationCodeLifetime: 900
